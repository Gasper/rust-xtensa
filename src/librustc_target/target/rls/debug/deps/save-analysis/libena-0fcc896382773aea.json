{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.2","compilation":{"directory":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48],"program":"/home/mabez/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","ena","/home/mabez/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.11.0/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debug-assertions=off","-C","overflow-checks=on","-C","metadata=0fcc896382773aea","-C","extra-filename=-0fcc896382773aea","--out-dir","/home/mabez/development/rust/rust-xtensa/rust/src/librustc_target/target/rls/debug/deps","-L","dependency=/home/mabez/development/rust/rust-xtensa/rust/src/librustc_target/target/rls/debug/deps","--extern","log=/home/mabez/development/rust/rust-xtensa/rust/src/librustc_target/target/rls/debug/deps/liblog-5afd4eaa5d366446.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/mabez/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":[47,104,111,109,101,47,109,97,98,101,122,47,100,101,118,101,108,111,112,109,101,110,116,47,114,117,115,116,47,114,117,115,116,45,120,116,101,110,115,97,47,114,117,115,116,47,115,114,99,47,108,105,98,114,117,115,116,99,95,116,97,114,103,101,116,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,100,101,112,115,47,108,105,98,101,110,97,45,48,102,99,99,56,57,54,51,56,50,55,55,51,97,101,97,46,114,109,101,116,97]},"prelude":{"crate_id":{"name":"ena","disambiguator":[14928832028534097967,210073192510858769]},"crate_root":"/home/mabez/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.11.0/src","external_crates":[{"file_name":"/home/mabez/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.11.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[9026290859092707541,11776650819458620240]}},{"file_name":"/home/mabez/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.11.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[17093090791567232548,15290107030553811387]}},{"file_name":"/home/mabez/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.11.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[4123373423177901622,17823304393605258561]}},{"file_name":"/home/mabez/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.11.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[6110398050331488908,13918121491892370412]}},{"file_name":"/home/mabez/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.11.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[11185245893574232097,15198652419602178423]}},{"file_name":"/home/mabez/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.11.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[1640018811171659727,10425584291591394678]}},{"file_name":"/home/mabez/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.11.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[865149028634539190,13964675057810697519]}},{"file_name":"/home/mabez/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.11.0/src/lib.rs","num":8,"id":{"name":"rustc_demangle","disambiguator":[3490934874757888345,10034220849195222178]}},{"file_name":"/home/mabez/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.11.0/src/lib.rs","num":9,"id":{"name":"backtrace_sys","disambiguator":[9201961296462827629,14742363396304788044]}},{"file_name":"/home/mabez/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.11.0/src/lib.rs","num":10,"id":{"name":"panic_unwind","disambiguator":[2154693684691642938,14443485955487136843]}},{"file_name":"/home/mabez/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.11.0/src/lib.rs","num":11,"id":{"name":"log","disambiguator":[5684022238426445907,5648344127261484611]}},{"file_name":"/home/mabez/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.11.0/src/lib.rs","num":12,"id":{"name":"cfg_if","disambiguator":[14388908386064344834,3883046353202239588]}}],"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":467,"byte_end":719,"line_start":11,"line_end":23,"column_start":1,"column_end":15}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":318},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":13030,"byte_end":13037,"line_start":38,"line_end":38,"column_start":29,"column_end":36},"alias_span":null,"name":"InPlace","value":"","parent":{"krate":0,"index":114}},{"kind":"Use","ref_id":{"krate":0,"index":138},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":13039,"byte_end":13055,"line_start":38,"line_end":38,"column_start":38,"column_end":54},"alias_span":null,"name":"UnificationStore","value":"","parent":{"krate":0,"index":114}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":467,"byte_end":719,"line_start":11,"line_end":23,"column_start":1,"column_end":15},"name":"","qualname":"::","value":"/home/mabez/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.11.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":114}],"decl_id":null,"docs":" An implementation of union-find. See the `unify` module for more\n details.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":8},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,115,110,97,112,115,104,111,116,95,118,101,99,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"snapshot_vec","qualname":"::snapshot_vec","value":"/home/mabez/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.11.0/src/snapshot_vec.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":312},{"krate":0,"index":314},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":24},{"krate":0,"index":26},{"krate":0,"index":34},{"krate":0,"index":38},{"krate":0,"index":74},{"krate":0,"index":80},{"krate":0,"index":84},{"krate":0,"index":90},{"krate":0,"index":94},{"krate":0,"index":98},{"krate":0,"index":102},{"krate":0,"index":106}],"decl_id":null,"docs":" A utility class for implementing \"snapshottable\" things; a snapshottable data structure permits\n you to take a snapshot (via `start_snapshot`) and then, after making some changes, elect either\n to rollback to the start of the snapshot or commit those changes.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":137},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,115,110,97,112,115,104,111,116,95,118,101,99,46,114,115],"byte_start":2134,"byte_end":2141,"line_start":31,"line_end":31,"column_start":5,"column_end":12},"name":"NewElem","qualname":"::snapshot_vec::UndoLog::NewElem","value":"UndoLog::NewElem(usize)","parent":{"krate":0,"index":312},"children":[],"decl_id":null,"docs":" New variable with given index was created.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":141},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,115,110,97,112,115,104,111,116,95,118,101,99,46,114,115],"byte_start":2225,"byte_end":2232,"line_start":34,"line_end":34,"column_start":5,"column_end":12},"name":"SetElem","qualname":"::snapshot_vec::UndoLog::SetElem","value":"UndoLog::SetElem(usize, D::Value)","parent":{"krate":0,"index":312},"children":[],"decl_id":null,"docs":" Variable with given index was changed *from* the given value.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":147},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,115,110,97,112,115,104,111,116,95,118,101,99,46,114,115],"byte_start":2290,"byte_end":2295,"line_start":37,"line_end":37,"column_start":5,"column_end":10},"name":"Other","qualname":"::snapshot_vec::UndoLog::Other","value":"UndoLog::Other(D::Undo)","parent":{"krate":0,"index":312},"children":[],"decl_id":null,"docs":" Extensible set of actions\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":312},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,115,110,97,112,115,104,111,116,95,118,101,99,46,114,115],"byte_start":2045,"byte_end":2052,"line_start":29,"line_end":29,"column_start":10,"column_end":17},"name":"UndoLog","qualname":"::snapshot_vec::UndoLog","value":"UndoLog::{NewElem, SetElem, Other}","parent":null,"children":[{"krate":0,"index":137},{"krate":0,"index":141},{"krate":0,"index":147}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":18},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,115,110,97,112,115,104,111,116,95,118,101,99,46,114,115],"byte_start":2320,"byte_end":2331,"line_start":40,"line_end":40,"column_start":12,"column_end":23},"name":"SnapshotVec","qualname":"::snapshot_vec::SnapshotVec","value":"SnapshotVec {  }","parent":null,"children":[{"krate":0,"index":21},{"krate":0,"index":23},{"krate":0,"index":25}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":24},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,115,110,97,112,115,104,111,116,95,118,101,99,46,114,115],"byte_start":2977,"byte_end":2985,"line_start":62,"line_end":62,"column_start":12,"column_end":20},"name":"Snapshot","qualname":"::snapshot_vec::Snapshot","value":"Snapshot {  }","parent":null,"children":[{"krate":0,"index":29}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":26},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,115,110,97,112,115,104,111,116,95,118,101,99,46,114,115],"byte_start":3086,"byte_end":3105,"line_start":67,"line_end":67,"column_start":11,"column_end":30},"name":"SnapshotVecDelegate","qualname":"::snapshot_vec::SnapshotVecDelegate","value":"SnapshotVecDelegate","parent":null,"children":[{"krate":0,"index":28},{"krate":0,"index":30},{"krate":0,"index":32}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":28},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,115,110,97,112,115,104,111,116,95,118,101,99,46,114,115],"byte_start":3117,"byte_end":3122,"line_start":68,"line_end":68,"column_start":10,"column_end":15},"name":"Value","qualname":"::snapshot_vec::SnapshotVecDelegate::Value","value":"type Value;","parent":{"krate":0,"index":26},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":30},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,115,110,97,112,115,104,111,116,95,118,101,99,46,114,115],"byte_start":3133,"byte_end":3137,"line_start":69,"line_end":69,"column_start":10,"column_end":14},"name":"Undo","qualname":"::snapshot_vec::SnapshotVecDelegate::Undo","value":"type Undo;","parent":{"krate":0,"index":26},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,115,110,97,112,115,104,111,116,95,118,101,99,46,114,115],"byte_start":3147,"byte_end":3154,"line_start":71,"line_end":71,"column_start":8,"column_end":15},"name":"reverse","qualname":"::snapshot_vec::SnapshotVecDelegate::reverse","value":"fn (values: &mut Vec<Self::Value>, action: Self::Undo) -> ()","parent":{"krate":0,"index":26},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,115,110,97,112,115,104,111,116,95,118,101,99,46,114,115],"byte_start":3552,"byte_end":3555,"line_start":86,"line_end":86,"column_start":12,"column_end":15},"name":"new","qualname":"<SnapshotVec<D>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,115,110,97,112,115,104,111,116,95,118,101,99,46,114,115],"byte_start":3610,"byte_end":3623,"line_start":90,"line_end":90,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<SnapshotVec<D>>::with_capacity","value":"fn (c: usize) -> SnapshotVec<D>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,115,110,97,112,115,104,111,116,95,118,101,99,46,114,115],"byte_start":3895,"byte_end":3901,"line_start":102,"line_end":102,"column_start":12,"column_end":18},"name":"record","qualname":"<SnapshotVec<D>>::record","value":"fn (&mut self, action: D::Undo) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,115,110,97,112,115,104,111,116,95,118,101,99,46,114,115],"byte_start":4039,"byte_end":4042,"line_start":108,"line_end":108,"column_start":12,"column_end":15},"name":"len","qualname":"<SnapshotVec<D>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,115,110,97,112,115,104,111,116,95,118,101,99,46,114,115],"byte_start":4105,"byte_end":4109,"line_start":112,"line_end":112,"column_start":12,"column_end":16},"name":"push","qualname":"<SnapshotVec<D>>::push","value":"fn (&mut self, elem: D::Value) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,115,110,97,112,115,104,111,116,95,118,101,99,46,114,115],"byte_start":4337,"byte_end":4340,"line_start":123,"line_end":123,"column_start":12,"column_end":15},"name":"get","qualname":"<SnapshotVec<D>>::get","value":"fn (&self, index: usize) -> &D::Value","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,115,110,97,112,115,104,111,116,95,118,101,99,46,114,115],"byte_start":4488,"byte_end":4495,"line_start":128,"line_end":128,"column_start":12,"column_end":19},"name":"reserve","qualname":"<SnapshotVec<D>>::reserve","value":"fn (&mut self, additional: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reserve space for new values, just like an ordinary vec.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,115,110,97,112,115,104,111,116,95,118,101,99,46,114,115],"byte_start":4850,"byte_end":4857,"line_start":136,"line_end":136,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<SnapshotVec<D>>::get_mut","value":"fn (&mut self, index: usize) -> &mut D::Value","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable pointer into the vec; whatever changes you make here cannot be undone\n automatically, so you should be sure call `record()` with some sort of suitable undo\n action.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,115,110,97,112,115,104,111,116,95,118,101,99,46,114,115],"byte_start":5081,"byte_end":5084,"line_start":142,"line_end":142,"column_start":12,"column_end":15},"name":"set","qualname":"<SnapshotVec<D>>::set","value":"fn (&mut self, index: usize, new_elem: D::Value) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Updates the element at the given index. The old value will saved (and perhaps restored) if\n a snapshot is active.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,115,110,97,112,115,104,111,116,95,118,101,99,46,114,115],"byte_start":5454,"byte_end":5461,"line_start":151,"line_end":151,"column_start":12,"column_end":19},"name":"set_all","qualname":"<SnapshotVec<D>>::set_all","value":"fn (&mut self, mut new_elems: impl FnMut(usize) -> D::Value) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Updates all elements. Potentially more efficient -- but\n otherwise equivalent to -- invoking `set` for each element.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,115,110,97,112,115,104,111,116,95,118,101,99,46,114,115],"byte_start":5823,"byte_end":5829,"line_start":163,"line_end":163,"column_start":12,"column_end":18},"name":"update","qualname":"<SnapshotVec<D>>::update","value":"fn <OP> (&mut self, index: usize, op: OP) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,115,110,97,112,115,104,111,116,95,118,101,99,46,114,115],"byte_start":6153,"byte_end":6167,"line_start":175,"line_end":175,"column_start":12,"column_end":26},"name":"start_snapshot","qualname":"<SnapshotVec<D>>::start_snapshot","value":"fn (&mut self) -> Snapshot","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,115,110,97,112,115,104,111,116,95,118,101,99,46,114,115],"byte_start":6327,"byte_end":6349,"line_start":181,"line_end":181,"column_start":12,"column_end":34},"name":"actions_since_snapshot","qualname":"<SnapshotVec<D>>::actions_since_snapshot","value":"fn (&self, snapshot: &Snapshot) -> &[UndoLog<D>]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,115,110,97,112,115,104,111,116,95,118,101,99,46,114,115],"byte_start":6703,"byte_end":6714,"line_start":191,"line_end":191,"column_start":12,"column_end":23},"name":"rollback_to","qualname":"<SnapshotVec<D>>::rollback_to","value":"fn (&mut self, snapshot: Snapshot) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,115,110,97,112,115,104,111,116,95,118,101,99,46,114,115],"byte_start":7503,"byte_end":7509,"line_start":218,"line_end":218,"column_start":12,"column_end":18},"name":"commit","qualname":"<SnapshotVec<D>>::commit","value":"fn (&mut self, snapshot: Snapshot) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Commits all changes since the last snapshot. Of course, they\n can still be undone if there is a snapshot further out.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":114},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"unify","qualname":"::unify","value":"/home/mabez/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.11.0/src/unify/mod.rs","parent":null,"children":[{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":120},{"krate":0,"index":206},{"krate":0,"index":212},{"krate":0,"index":224},{"krate":0,"index":230},{"krate":0,"index":232},{"krate":0,"index":340},{"krate":0,"index":342},{"krate":0,"index":346},{"krate":0,"index":356},{"krate":0,"index":352},{"krate":0,"index":348},{"krate":0,"index":362},{"krate":0,"index":372},{"krate":0,"index":368},{"krate":0,"index":364},{"krate":0,"index":238},{"krate":0,"index":240},{"krate":0,"index":242},{"krate":0,"index":256},{"krate":0,"index":284},{"krate":0,"index":300},{"krate":0,"index":306}],"decl_id":null,"docs":" Union-find implementation. The main type is `UnificationTable`.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":138},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,98,97,99,107,105,110,103,95,118,101,99,46,114,115],"byte_start":30837,"byte_end":30853,"line_start":16,"line_end":16,"column_start":11,"column_end":27},"name":"UnificationStore","qualname":"::unify::backing_vec::UnificationStore","value":"UnificationStore: ops::Index<usize, Output = VarValue<Key<Self>>> + Clone + Default","parent":null,"children":[{"krate":0,"index":140},{"krate":0,"index":142},{"krate":0,"index":144},{"krate":0,"index":146},{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":158},{"krate":0,"index":160},{"krate":0,"index":162}],"decl_id":null,"docs":" Largely internal trait implemented by the unification table\n backing store types. The most common such type is `InPlace`,\n which indicates a standard, mutable unification table.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":140},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,98,97,99,107,105,110,103,95,118,101,99,46,114,115],"byte_start":30936,"byte_end":30939,"line_start":19,"line_end":19,"column_start":10,"column_end":13},"name":"Key","qualname":"::unify::backing_vec::UnificationStore::Key","value":"type Key: UnifyKey<Value = Self::Value>;","parent":{"krate":0,"index":138},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":142},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,98,97,99,107,105,110,103,95,118,101,99,46,114,115],"byte_start":30981,"byte_end":30986,"line_start":20,"line_end":20,"column_start":10,"column_end":15},"name":"Value","qualname":"::unify::backing_vec::UnificationStore::Value","value":"type Value: UnifyValue;","parent":{"krate":0,"index":138},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":144},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,98,97,99,107,105,110,103,95,118,101,99,46,114,115],"byte_start":31009,"byte_end":31017,"line_start":21,"line_end":21,"column_start":10,"column_end":18},"name":"Snapshot","qualname":"::unify::backing_vec::UnificationStore::Snapshot","value":"type Snapshot;","parent":{"krate":0,"index":138},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,98,97,99,107,105,110,103,95,118,101,99,46,114,115],"byte_start":31027,"byte_end":31041,"line_start":23,"line_end":23,"column_start":8,"column_end":22},"name":"start_snapshot","qualname":"::unify::backing_vec::UnificationStore::start_snapshot","value":"fn (&mut self) -> Self::Snapshot","parent":{"krate":0,"index":138},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,98,97,99,107,105,110,103,95,118,101,99,46,114,115],"byte_start":31080,"byte_end":31091,"line_start":25,"line_end":25,"column_start":8,"column_end":19},"name":"rollback_to","qualname":"::unify::backing_vec::UnificationStore::rollback_to","value":"fn (&mut self, snapshot: Self::Snapshot) -> ()","parent":{"krate":0,"index":138},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,98,97,99,107,105,110,103,95,118,101,99,46,114,115],"byte_start":31138,"byte_end":31144,"line_start":27,"line_end":27,"column_start":8,"column_end":14},"name":"commit","qualname":"::unify::backing_vec::UnificationStore::commit","value":"fn (&mut self, snapshot: Self::Snapshot) -> ()","parent":{"krate":0,"index":138},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,98,97,99,107,105,110,103,95,118,101,99,46,114,115],"byte_start":31191,"byte_end":31209,"line_start":29,"line_end":29,"column_start":8,"column_end":26},"name":"reset_unifications","qualname":"::unify::backing_vec::UnificationStore::reset_unifications","value":"fn (&mut self, value: impl FnMut(u32) -> VarValue<Self::Key>) -> ()","parent":{"krate":0,"index":138},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,98,97,99,107,105,110,103,95,118,101,99,46,114,115],"byte_start":31300,"byte_end":31303,"line_start":34,"line_end":34,"column_start":8,"column_end":11},"name":"len","qualname":"::unify::backing_vec::UnificationStore::len","value":"fn (&self) -> usize","parent":{"krate":0,"index":138},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,98,97,99,107,105,110,103,95,118,101,99,46,114,115],"byte_start":31329,"byte_end":31333,"line_start":36,"line_end":36,"column_start":8,"column_end":12},"name":"push","qualname":"::unify::backing_vec::UnificationStore::push","value":"fn (&mut self, value: VarValue<Self::Key>) -> ()","parent":{"krate":0,"index":138},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,98,97,99,107,105,110,103,95,118,101,99,46,114,115],"byte_start":31382,"byte_end":31389,"line_start":38,"line_end":38,"column_start":8,"column_end":15},"name":"reserve","qualname":"::unify::backing_vec::UnificationStore::reserve","value":"fn (&mut self, num_new_values: usize) -> ()","parent":{"krate":0,"index":138},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,98,97,99,107,105,110,103,95,118,101,99,46,114,115],"byte_start":31433,"byte_end":31439,"line_start":40,"line_end":40,"column_start":8,"column_end":14},"name":"update","qualname":"::unify::backing_vec::UnificationStore::update","value":"fn <F> (&mut self, index: usize, op: F) -> ()","parent":{"krate":0,"index":138},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,98,97,99,107,105,110,103,95,118,101,99,46,114,115],"byte_start":31534,"byte_end":31537,"line_start":43,"line_end":43,"column_start":8,"column_end":11},"name":"tag","qualname":"::unify::backing_vec::UnificationStore::tag","value":"fn () -> &'static str","parent":{"krate":0,"index":138},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":318},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,98,97,99,107,105,110,103,95,118,101,99,46,114,115],"byte_start":31713,"byte_end":31720,"line_start":51,"line_end":51,"column_start":12,"column_end":19},"name":"InPlace","qualname":"::unify::backing_vec::InPlace","value":"InPlace {  }","parent":null,"children":[{"krate":0,"index":155}],"decl_id":null,"docs":" Backing store for an in-place unification table.\n Not typically used directly.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":212},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":13692,"byte_end":13700,"line_start":58,"line_end":58,"column_start":11,"column_end":19},"name":"UnifyKey","qualname":"::unify::UnifyKey","value":"UnifyKey: Copy + Clone + Debug + PartialEq","parent":null,"children":[{"krate":0,"index":214},{"krate":0,"index":216},{"krate":0,"index":218},{"krate":0,"index":220},{"krate":0,"index":222}],"decl_id":null,"docs":" This trait is implemented by any type that can serve as a type\n variable. We call such variables *unification keys*. For example,\n this trait is implemented by `IntVid`, which represents integral\n variables.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":214},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":13746,"byte_end":13751,"line_start":59,"line_end":59,"column_start":10,"column_end":15},"name":"Value","qualname":"::unify::UnifyKey::Value","value":"type Value: UnifyValue;","parent":{"krate":0,"index":212},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":13773,"byte_end":13778,"line_start":61,"line_end":61,"column_start":8,"column_end":13},"name":"index","qualname":"::unify::UnifyKey::index","value":"fn (&self) -> u32","parent":{"krate":0,"index":212},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":13802,"byte_end":13812,"line_start":63,"line_end":63,"column_start":8,"column_end":18},"name":"from_index","qualname":"::unify::UnifyKey::from_index","value":"fn (u: u32) -> Self","parent":{"krate":0,"index":212},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":13838,"byte_end":13841,"line_start":65,"line_end":65,"column_start":8,"column_end":11},"name":"tag","qualname":"::unify::UnifyKey::tag","value":"fn () -> &'static str","parent":{"krate":0,"index":212},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":14649,"byte_end":14660,"line_start":81,"line_end":81,"column_start":8,"column_end":19},"name":"order_roots","qualname":"::unify::UnifyKey::order_roots","value":"fn (a: Self, a_value: &Self::Value, b: Self, b_value: &Self::Value) -> Option<(Self, Self)>","parent":{"krate":0,"index":212},"children":[],"decl_id":null,"docs":" If true, then `self` should be preferred as root to `other`.\n Note that we assume a consistent partial ordering, so\n returning true implies that `other.prefer_as_root_to(self)`\n would return false.  If there is no ordering between two keys\n (i.e., `a.prefer_as_root_to(b)` and `b.prefer_as_root_to(a)`\n both return false) then the rank will be used to determine the\n root in an optimal way.","sig":null,"attributes":[{"value":"allow(unused_variables)","span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":14615,"byte_end":14641,"line_start":80,"line_end":80,"column_start":5,"column_end":31}}]},{"kind":"Trait","id":{"krate":0,"index":224},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":15543,"byte_end":15553,"line_start":105,"line_end":105,"column_start":11,"column_end":21},"name":"UnifyValue","qualname":"::unify::UnifyValue","value":"UnifyValue: Clone + Debug","parent":null,"children":[{"krate":0,"index":226},{"krate":0,"index":228}],"decl_id":null,"docs":" Trait implemented for **values** associated with a unification\n key. This trait defines how to merge the values from two keys that\n are unioned together. This merging can be fallible. If you attempt\n to union two keys whose values cannot be merged, then the error is\n propagated up and the two keys are not unioned.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":226},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":15825,"byte_end":15830,"line_start":110,"line_end":110,"column_start":10,"column_end":15},"name":"Error","qualname":"::unify::UnifyValue::Error","value":"type Error;","parent":{"krate":0,"index":224},"children":[],"decl_id":null,"docs":" Defines the type to return when merging of two values fails.\n If merging is infallible, use the special struct `NoError`\n found in this crate, which unlocks various more convenient\n methods on the unification table.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":15957,"byte_end":15969,"line_start":114,"line_end":114,"column_start":8,"column_end":20},"name":"unify_values","qualname":"::unify::UnifyValue::unify_values","value":"fn (value1: &Self, value2: &Self) -> Result<Self, Self::Error>","parent":{"krate":0,"index":224},"children":[],"decl_id":null,"docs":" Given two values, produce a new value that combines them.\n If that is not possible, produce an error.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":230},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":16641,"byte_end":16653,"line_start":128,"line_end":128,"column_start":11,"column_end":23},"name":"EqUnifyValue","qualname":"::unify::EqUnifyValue","value":"EqUnifyValue: Eq + Clone + Debug","parent":null,"children":[],"decl_id":null,"docs":" A convenient helper for unification values which must be equal or\n else an error occurs. For example, if you are unifying types in a\n simple functional language, this may be appropriate, since (e.g.)\n you can't unify a type variable bound to `int` with one bound to\n `float` (but you can unify two type variables both bound to\n `int`).","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":340},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":17097,"byte_end":17104,"line_start":145,"line_end":145,"column_start":12,"column_end":19},"name":"NoError","qualname":"::unify::NoError","value":"NoError {  }","parent":null,"children":[{"krate":0,"index":173}],"decl_id":null,"docs":" A struct which can never be instantiated. Used\n for the error type for infallible cases.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":346},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":17713,"byte_end":17721,"line_start":158,"line_end":158,"column_start":12,"column_end":20},"name":"VarValue","qualname":"::unify::VarValue","value":"VarValue {  }","parent":null,"children":[{"krate":0,"index":177},{"krate":0,"index":179},{"krate":0,"index":181}],"decl_id":null,"docs":" Value of a unification key. We implement Tarjan's union-find\n algorithm: when two keys are unified, one of them is converted\n into a \"redirect\" pointing at the other. These redirects form a\n DAG: the roots of the DAG (nodes that are not redirected) are each\n associated with a value of type `V` and a rank. The rank is used\n to keep the DAG relatively balanced, which helps keep the running\n time of the algorithm under control. For more information, see\n <http://en.wikipedia.org/wiki/Disjoint-set_data_structure>.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":362},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":18763,"byte_end":18779,"line_start":178,"line_end":178,"column_start":12,"column_end":28},"name":"UnificationTable","qualname":"::unify::UnificationTable","value":"UnificationTable {  }","parent":null,"children":[{"krate":0,"index":191}],"decl_id":null,"docs":" Table of unification keys and their values. You must define a key type K\n that implements the `UnifyKey` trait. Unification tables can be used in two-modes:","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":238},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":18963,"byte_end":18986,"line_start":185,"line_end":185,"column_start":10,"column_end":33},"name":"InPlaceUnificationTable","qualname":"::unify::InPlaceUnificationTable","value":"UnificationTable<InPlace<K>>","parent":null,"children":[],"decl_id":null,"docs":" A unification table that uses an \"in-place\" vector.\n","sig":null,"attributes":[{"value":"allow(type_alias_bounds)","span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":18926,"byte_end":18953,"line_start":184,"line_end":184,"column_start":1,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":240},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":19388,"byte_end":19396,"line_start":194,"line_end":194,"column_start":12,"column_end":20},"name":"Snapshot","qualname":"::unify::Snapshot","value":"Snapshot {  }","parent":null,"children":[{"krate":0,"index":83},{"krate":0,"index":85}],"decl_id":null,"docs":" At any time, users may snapshot a unification table.  The changes\n made during the snapshot may either be *committed* or *rolled back*.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":20595,"byte_end":20598,"line_start":241,"line_end":241,"column_start":12,"column_end":15},"name":"new","qualname":"<UnificationTable<S>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":20773,"byte_end":20781,"line_start":247,"line_end":247,"column_start":12,"column_end":20},"name":"snapshot","qualname":"<UnificationTable<S>>::snapshot","value":"fn (&mut self) -> Snapshot<S>","parent":null,"children":[],"decl_id":null,"docs":" Starts a new snapshot. Each snapshot must be either\n rolled back or committed in a \"LIFO\" (stack) order.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":21074,"byte_end":21085,"line_start":256,"line_end":256,"column_start":12,"column_end":23},"name":"rollback_to","qualname":"<UnificationTable<S>>::rollback_to","value":"fn (&mut self, snapshot: Snapshot<S>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reverses all changes since the last snapshot. Also\n removes any keys that have been created since then.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":21372,"byte_end":21378,"line_start":263,"line_end":263,"column_start":12,"column_end":18},"name":"commit","qualname":"<UnificationTable<S>>::commit","value":"fn (&mut self, snapshot: Snapshot<S>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Commits all changes since the last snapshot. Of course, they\n can still be undone if there is a snapshot further out.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":21572,"byte_end":21579,"line_start":269,"line_end":269,"column_start":12,"column_end":19},"name":"new_key","qualname":"<UnificationTable<S>>::new_key","value":"fn (&mut self, value: S::Value) -> S::Key","parent":null,"children":[],"decl_id":null,"docs":" Creates a fresh key with the given value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":22000,"byte_end":22007,"line_start":279,"line_end":279,"column_start":12,"column_end":19},"name":"reserve","qualname":"<UnificationTable<S>>::reserve","value":"fn (&mut self, num_new_keys: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reserve memory for `num_new_keys` to be created. Does not\n actually create the new keys; you must then invoke `new_key`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":22263,"byte_end":22281,"line_start":286,"line_end":286,"column_start":12,"column_end":30},"name":"reset_unifications","qualname":"<UnificationTable<S>>::reset_unifications","value":"fn (&mut self, mut value: impl FnMut(S::Key) -> S::Value) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clears all unifications that have been performed, resetting to\n the initial state. The values of each variable are given by\n the closure.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":22619,"byte_end":22622,"line_start":298,"line_end":298,"column_start":12,"column_end":15},"name":"len","qualname":"<UnificationTable<S>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of keys created so far.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":27125,"byte_end":27130,"line_start":424,"line_end":424,"column_start":12,"column_end":17},"name":"union","qualname":"<UnificationTable<S>>::union","value":"fn <K1, K2> (&mut self, a_id: K1, b_id: K2) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unions two keys without the possibility of failure; only\n applicable when unify values use `NoError` as their error\n type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":27489,"byte_end":27500,"line_start":436,"line_end":436,"column_start":12,"column_end":23},"name":"union_value","qualname":"<UnificationTable<S>>::union_value","value":"fn <K1> (&mut self, id: K1, value: V) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unions a key and a value without the possibility of failure;\n only applicable when unify values use `NoError` as their error\n type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":27754,"byte_end":27761,"line_start":445,"line_end":445,"column_start":12,"column_end":19},"name":"unioned","qualname":"<UnificationTable<S>>::unioned","value":"fn <K1, K2> (&mut self, a_id: K1, b_id: K2) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Given two keys, indicates whether they have been unioned together.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":27981,"byte_end":27985,"line_start":454,"line_end":454,"column_start":12,"column_end":16},"name":"find","qualname":"<UnificationTable<S>>::find","value":"fn <K1> (&mut self, id: K1) -> K","parent":null,"children":[],"decl_id":null,"docs":" Given a key, returns the (current) root key.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":28288,"byte_end":28301,"line_start":465,"line_end":465,"column_start":12,"column_end":25},"name":"unify_var_var","qualname":"<UnificationTable<S>>::unify_var_var","value":"fn <K1, K2> (&mut self, a_id: K1, b_id: K2) -> Result<(), V::Error>","parent":null,"children":[],"decl_id":null,"docs":" Unions together two variables, merging their values. If\n merging the values fails, the error is propagated and this\n method has no effect.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":28920,"byte_end":28935,"line_start":487,"line_end":487,"column_start":12,"column_end":27},"name":"unify_var_value","qualname":"<UnificationTable<S>>::unify_var_value","value":"fn <K1> (&mut self, a_id: K1, b: V) -> Result<(), V::Error>","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the key `a_id` to `b`, attempting to merge\n with the previous value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":29408,"byte_end":29419,"line_start":500,"line_end":500,"column_start":12,"column_end":23},"name":"probe_value","qualname":"<UnificationTable<S>>::probe_value","value":"fn <K1> (&mut self, id: K1) -> V","parent":null,"children":[],"decl_id":null,"docs":" Returns the current value for the given key. If the key has\n been union'd, this will give the value from the current root.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,115,110,97,112,115,104,111,116,95,118,101,99,46,114,115],"byte_start":2473,"byte_end":2484,"line_start":46,"line_end":46,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":22}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,115,110,97,112,115,104,111,116,95,118,101,99,46,114,115],"byte_start":3309,"byte_end":3320,"line_start":75,"line_end":75,"column_start":42,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,115,110,97,112,115,104,111,116,95,118,101,99,46,114,115],"byte_start":3524,"byte_end":3535,"line_start":85,"line_end":85,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":40},{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":56},{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,115,110,97,112,115,104,111,116,95,118,101,99,46,114,115],"byte_start":8032,"byte_end":8043,"line_start":235,"line_end":235,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":76},{"krate":0,"index":78}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,115,110,97,112,115,104,111,116,95,118,101,99,46,114,115],"byte_start":8194,"byte_end":8205,"line_start":242,"line_end":242,"column_start":48,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,115,110,97,112,115,104,111,116,95,118,101,99,46,114,115],"byte_start":8346,"byte_end":8357,"line_start":248,"line_end":248,"column_start":52,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":86},{"krate":0,"index":88}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,115,110,97,112,115,104,111,116,95,118,101,99,46,114,115],"byte_start":8527,"byte_end":8538,"line_start":255,"line_end":255,"column_start":55,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,115,110,97,112,115,104,111,116,95,118,101,99,46,114,115],"byte_start":8692,"byte_end":8703,"line_start":261,"line_end":261,"column_start":51,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,115,110,97,112,115,104,111,116,95,118,101,99,46,114,115],"byte_start":9109,"byte_end":9120,"line_start":276,"line_end":276,"column_start":40,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":100}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,115,110,97,112,115,104,111,116,95,118,101,99,46,114,115],"byte_start":9426,"byte_end":9433,"line_start":290,"line_end":290,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":104}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,98,97,99,107,105,110,103,95,118,101,99,46,114,115],"byte_start":31868,"byte_end":31875,"line_start":56,"line_end":56,"column_start":31,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,98,97,99,107,105,110,103,95,118,101,99,46,114,115],"byte_start":32007,"byte_end":32014,"line_start":62,"line_end":62,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":170},{"krate":0,"index":172},{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":178},{"krate":0,"index":180},{"krate":0,"index":182},{"krate":0,"index":184},{"krate":0,"index":186},{"krate":0,"index":188},{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,98,97,99,107,105,110,103,95,118,101,99,46,114,115],"byte_start":33125,"byte_end":33132,"line_start":113,"line_end":113,"column_start":31,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":194},{"krate":0,"index":196}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,98,97,99,107,105,110,103,95,118,101,99,46,114,115],"byte_start":33393,"byte_end":33401,"line_start":125,"line_end":125,"column_start":47,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":200},{"krate":0,"index":202},{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":16715,"byte_end":16716,"line_start":130,"line_end":130,"column_start":38,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":234},{"krate":0,"index":236}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":19568,"byte_end":19576,"line_start":200,"line_end":200,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":248},{"krate":0,"index":250},{"krate":0,"index":252},{"krate":0,"index":254}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":20562,"byte_end":20578,"line_start":240,"line_end":240,"column_start":27,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":258},{"krate":0,"index":260},{"krate":0,"index":262},{"krate":0,"index":264},{"krate":0,"index":266},{"krate":0,"index":268},{"krate":0,"index":270},{"krate":0,"index":272},{"krate":0,"index":274},{"krate":0,"index":276},{"krate":0,"index":278},{"krate":0,"index":280},{"krate":0,"index":282}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":26849,"byte_end":26865,"line_start":415,"line_end":415,"column_start":21,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":286},{"krate":0,"index":288},{"krate":0,"index":290},{"krate":0,"index":292},{"krate":0,"index":294},{"krate":0,"index":296},{"krate":0,"index":298}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":29849,"byte_end":29855,"line_start":521,"line_end":521,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":308},{"krate":0,"index":310}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":691,"byte_end":703,"line_start":22,"line_end":22,"column_start":9,"column_end":21},"ref_id":{"krate":0,"index":8}},{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":713,"byte_end":718,"line_start":23,"line_end":23,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":114}}],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,115,110,97,112,115,104,111,116,95,118,101,99,46,114,115],"byte_start":2473,"byte_end":2484,"line_start":46,"line_end":46,"column_start":24,"column_end":35},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":18},"to":{"krate":2,"index":8426}},{"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,115,110,97,112,115,104,111,116,95,118,101,99,46,114,115],"byte_start":3309,"byte_end":3320,"line_start":75,"line_end":75,"column_start":42,"column_end":53},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":18},"to":{"krate":2,"index":2632}},{"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,115,110,97,112,115,104,111,116,95,118,101,99,46,114,115],"byte_start":3524,"byte_end":3535,"line_start":85,"line_end":85,"column_start":30,"column_end":41},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":18},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,115,110,97,112,115,104,111,116,95,118,101,99,46,114,115],"byte_start":8032,"byte_end":8043,"line_start":235,"line_end":235,"column_start":45,"column_end":56},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":18},"to":{"krate":2,"index":1944}},{"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,115,110,97,112,115,104,111,116,95,118,101,99,46,114,115],"byte_start":8194,"byte_end":8205,"line_start":242,"line_end":242,"column_start":48,"column_end":59},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":18},"to":{"krate":2,"index":1962}},{"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,115,110,97,112,115,104,111,116,95,118,101,99,46,114,115],"byte_start":8346,"byte_end":8357,"line_start":248,"line_end":248,"column_start":52,"column_end":63},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":18},"to":{"krate":2,"index":2056}},{"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,115,110,97,112,115,104,111,116,95,118,101,99,46,114,115],"byte_start":8527,"byte_end":8538,"line_start":255,"line_end":255,"column_start":55,"column_end":66},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":18},"to":{"krate":2,"index":2062}},{"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,115,110,97,112,115,104,111,116,95,118,101,99,46,114,115],"byte_start":8692,"byte_end":8703,"line_start":261,"line_end":261,"column_start":51,"column_end":62},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":18},"to":{"krate":2,"index":4510}},{"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,115,110,97,112,115,104,111,116,95,118,101,99,46,114,115],"byte_start":9109,"byte_end":9120,"line_start":276,"line_end":276,"column_start":40,"column_end":51},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":0,"index":18},"to":{"krate":2,"index":2598}},{"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,115,110,97,112,115,104,111,116,95,118,101,99,46,114,115],"byte_start":9426,"byte_end":9433,"line_start":290,"line_end":290,"column_start":40,"column_end":47},"kind":{"variant":"Impl","fields":[9]},"from":{"krate":0,"index":312},"to":{"krate":2,"index":2598}},{"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,98,97,99,107,105,110,103,95,118,101,99,46,114,115],"byte_start":30864,"byte_end":30869,"line_start":17,"line_end":17,"column_start":10,"column_end":15},"kind":"SuperTrait","from":{"krate":2,"index":2056},"to":{"krate":0,"index":138}},{"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,98,97,99,107,105,110,103,95,118,101,99,46,114,115],"byte_start":30909,"byte_end":30914,"line_start":17,"line_end":17,"column_start":55,"column_end":60},"kind":"SuperTrait","from":{"krate":2,"index":2598},"to":{"krate":0,"index":138}},{"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,98,97,99,107,105,110,103,95,118,101,99,46,114,115],"byte_start":30917,"byte_end":30924,"line_start":17,"line_end":17,"column_start":63,"column_end":70},"kind":"SuperTrait","from":{"krate":2,"index":2632},"to":{"krate":0,"index":138}},{"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,98,97,99,107,105,110,103,95,118,101,99,46,114,115],"byte_start":31868,"byte_end":31875,"line_start":56,"line_end":56,"column_start":31,"column_end":38},"kind":{"variant":"Impl","fields":[11]},"from":{"krate":0,"index":318},"to":{"krate":2,"index":2632}},{"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,98,97,99,107,105,110,103,95,118,101,99,46,114,115],"byte_start":32007,"byte_end":32014,"line_start":62,"line_end":62,"column_start":40,"column_end":47},"kind":{"variant":"Impl","fields":[12]},"from":{"krate":0,"index":318},"to":{"krate":0,"index":138}},{"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,98,97,99,107,105,110,103,95,118,101,99,46,114,115],"byte_start":33125,"byte_end":33132,"line_start":113,"line_end":113,"column_start":31,"column_end":38},"kind":{"variant":"Impl","fields":[13]},"from":{"krate":0,"index":318},"to":{"krate":2,"index":2056}},{"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,98,97,99,107,105,110,103,95,118,101,99,46,114,115],"byte_start":33393,"byte_end":33401,"line_start":125,"line_end":125,"column_start":47,"column_end":55},"kind":{"variant":"Impl","fields":[14]},"from":{"krate":0,"index":328},"to":{"krate":0,"index":26}},{"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":13702,"byte_end":13706,"line_start":58,"line_end":58,"column_start":21,"column_end":25},"kind":"SuperTrait","from":{"krate":2,"index":1710},"to":{"krate":0,"index":212}},{"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":13709,"byte_end":13714,"line_start":58,"line_end":58,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":2598},"to":{"krate":0,"index":212}},{"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":13717,"byte_end":13722,"line_start":58,"line_end":58,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":8426},"to":{"krate":0,"index":212}},{"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":13725,"byte_end":13734,"line_start":58,"line_end":58,"column_start":44,"column_end":53},"kind":"SuperTrait","from":{"krate":2,"index":2410},"to":{"krate":0,"index":212}},{"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":15555,"byte_end":15560,"line_start":105,"line_end":105,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":2,"index":2598},"to":{"krate":0,"index":224}},{"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":15563,"byte_end":15568,"line_start":105,"line_end":105,"column_start":31,"column_end":36},"kind":"SuperTrait","from":{"krate":2,"index":8426},"to":{"krate":0,"index":224}},{"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":16655,"byte_end":16657,"line_start":128,"line_end":128,"column_start":25,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":2416},"to":{"krate":0,"index":230}},{"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":16660,"byte_end":16665,"line_start":128,"line_end":128,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":2598},"to":{"krate":0,"index":230}},{"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":16668,"byte_end":16673,"line_start":128,"line_end":128,"column_start":38,"column_end":43},"kind":"SuperTrait","from":{"krate":2,"index":8426},"to":{"krate":0,"index":230}},{"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":16715,"byte_end":16716,"line_start":130,"line_end":130,"column_start":38,"column_end":39},"kind":{"variant":"Impl","fields":[15]},"from":{"krate":0,"index":77},"to":{"krate":0,"index":224}},{"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":19568,"byte_end":19576,"line_start":200,"line_end":200,"column_start":19,"column_end":27},"kind":{"variant":"Impl","fields":[16]},"from":{"krate":0,"index":346},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":20562,"byte_end":20578,"line_start":240,"line_end":240,"column_start":27,"column_end":43},"kind":{"variant":"Impl","fields":[17]},"from":{"krate":0,"index":362},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":26849,"byte_end":26865,"line_start":415,"line_end":415,"column_start":21,"column_end":37},"kind":{"variant":"Impl","fields":[18]},"from":{"krate":0,"index":362},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,109,97,98,101,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,97,45,48,46,49,49,46,48,47,115,114,99,47,117,110,105,102,121,47,109,111,100,46,114,115],"byte_start":29849,"byte_end":29855,"line_start":521,"line_end":521,"column_start":36,"column_end":42},"kind":{"variant":"Impl","fields":[19]},"from":{"krate":2,"index":41846},"to":{"krate":0,"index":224}}]}